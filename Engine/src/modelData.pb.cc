// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modelData.proto

#include "modelData.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
        template <typename>
PROTOBUF_CONSTEXPR modelData_proto::modelData_proto(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.vbo_vert_)*/ 0,
      /*decltype(_impl_.vbo_norm_)*/ 0,
      /*decltype(_impl_.vbo_uv_)*/ 0,
      /*decltype(_impl_.vbo_trilist_)*/ 0,
      /*decltype(_impl_.text_color_)*/ 0,
      /*decltype(_impl_.text_normal_)*/ 0,
      /*decltype(_impl_.text_rough_)*/ 0,
    } {}
struct modelData_protoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR modelData_protoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~modelData_protoDefaultTypeInternal() {}
  union {
    modelData_proto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 modelData_protoDefaultTypeInternal _modelData_proto_default_instance_;
// ===================================================================

class modelData_proto::_Internal {
 public:
  using HasBits = decltype(std::declval<modelData_proto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(modelData_proto, _impl_._has_bits_);
  static void set_has_vbo_vert(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vbo_norm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vbo_uv(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vbo_trilist(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_text_color(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_text_normal(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_text_rough(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

modelData_proto::modelData_proto(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:modelData_proto)
}
modelData_proto::modelData_proto(const modelData_proto& from)
    : ::google::protobuf::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:modelData_proto)
}
inline void modelData_proto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.vbo_vert_){0},
      decltype(_impl_.vbo_norm_){0},
      decltype(_impl_.vbo_uv_){0},
      decltype(_impl_.vbo_trilist_){0},
      decltype(_impl_.text_color_){0},
      decltype(_impl_.text_normal_){0},
      decltype(_impl_.text_rough_){0},
  };
}
modelData_proto::~modelData_proto() {
  // @@protoc_insertion_point(destructor:modelData_proto)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void modelData_proto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void modelData_proto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void modelData_proto::Clear() {
// @@protoc_insertion_point(message_clear_start:modelData_proto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.vbo_vert_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.text_rough_) -
        reinterpret_cast<char*>(&_impl_.vbo_vert_)) + sizeof(_impl_.text_rough_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* modelData_proto::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2> modelData_proto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(modelData_proto, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_modelData_proto_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 vbo_vert = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(modelData_proto, _impl_.vbo_vert_)}},
    // optional int32 vbo_norm = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(modelData_proto, _impl_.vbo_norm_)}},
    // optional int32 vbo_uv = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(modelData_proto, _impl_.vbo_uv_)}},
    // optional int32 vbo_trilist = 4;
    {::_pbi::TcParser::FastV32S1,
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(modelData_proto, _impl_.vbo_trilist_)}},
    // optional int32 text_color = 5;
    {::_pbi::TcParser::FastV32S1,
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(modelData_proto, _impl_.text_color_)}},
    // optional int32 text_normal = 6;
    {::_pbi::TcParser::FastV32S1,
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(modelData_proto, _impl_.text_normal_)}},
    // optional int32 text_rough = 7;
    {::_pbi::TcParser::FastV32S1,
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(modelData_proto, _impl_.text_rough_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 vbo_vert = 1;
    {PROTOBUF_FIELD_OFFSET(modelData_proto, _impl_.vbo_vert_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 vbo_norm = 2;
    {PROTOBUF_FIELD_OFFSET(modelData_proto, _impl_.vbo_norm_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 vbo_uv = 3;
    {PROTOBUF_FIELD_OFFSET(modelData_proto, _impl_.vbo_uv_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 vbo_trilist = 4;
    {PROTOBUF_FIELD_OFFSET(modelData_proto, _impl_.vbo_trilist_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 text_color = 5;
    {PROTOBUF_FIELD_OFFSET(modelData_proto, _impl_.text_color_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 text_normal = 6;
    {PROTOBUF_FIELD_OFFSET(modelData_proto, _impl_.text_normal_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 text_rough = 7;
    {PROTOBUF_FIELD_OFFSET(modelData_proto, _impl_.text_rough_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* modelData_proto::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:modelData_proto)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 vbo_vert = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_vbo_vert(), target);
  }

  // optional int32 vbo_norm = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_vbo_norm(), target);
  }

  // optional int32 vbo_uv = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_vbo_uv(), target);
  }

  // optional int32 vbo_trilist = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_vbo_trilist(), target);
  }

  // optional int32 text_color = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_text_color(), target);
  }

  // optional int32 text_normal = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_text_normal(), target);
  }

  // optional int32 text_rough = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_text_rough(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:modelData_proto)
  return target;
}

::size_t modelData_proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:modelData_proto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 vbo_vert = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_vbo_vert());
    }

    // optional int32 vbo_norm = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_vbo_norm());
    }

    // optional int32 vbo_uv = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_vbo_uv());
    }

    // optional int32 vbo_trilist = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_vbo_trilist());
    }

    // optional int32 text_color = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_text_color());
    }

    // optional int32 text_normal = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_text_normal());
    }

    // optional int32 text_rough = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_text_rough());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void modelData_proto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const modelData_proto*>(
      &from));
}

void modelData_proto::MergeFrom(const modelData_proto& from) {
  modelData_proto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:modelData_proto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.vbo_vert_ = from._impl_.vbo_vert_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.vbo_norm_ = from._impl_.vbo_norm_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.vbo_uv_ = from._impl_.vbo_uv_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.vbo_trilist_ = from._impl_.vbo_trilist_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.text_color_ = from._impl_.text_color_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.text_normal_ = from._impl_.text_normal_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.text_rough_ = from._impl_.text_rough_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void modelData_proto::CopyFrom(const modelData_proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:modelData_proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool modelData_proto::IsInitialized() const {
  return true;
}

void modelData_proto::InternalSwap(modelData_proto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(modelData_proto, _impl_.text_rough_)
      + sizeof(modelData_proto::_impl_.text_rough_)
      - PROTOBUF_FIELD_OFFSET(modelData_proto, _impl_.vbo_vert_)>(
          reinterpret_cast<char*>(&_impl_.vbo_vert_),
          reinterpret_cast<char*>(&other->_impl_.vbo_vert_));
}

std::string modelData_proto::GetTypeName() const {
  return "modelData_proto";
}

// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
