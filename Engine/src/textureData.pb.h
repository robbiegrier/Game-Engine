// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: textureData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_textureData_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_textureData_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_textureData_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_textureData_2eproto {
  static const ::uint32_t offsets[];
};
class textureData_proto;
struct textureData_protoDefaultTypeInternal;
extern textureData_protoDefaultTypeInternal _textureData_proto_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum textureData_proto_TEXTURE_TYPE : int {
  textureData_proto_TEXTURE_TYPE_JPEG = 0,
  textureData_proto_TEXTURE_TYPE_PNG = 1,
  textureData_proto_TEXTURE_TYPE_BMP = 2,
  textureData_proto_TEXTURE_TYPE_GIF = 3,
  textureData_proto_TEXTURE_TYPE_textureData_proto_TEXTURE_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  textureData_proto_TEXTURE_TYPE_textureData_proto_TEXTURE_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool textureData_proto_TEXTURE_TYPE_IsValid(int value);
constexpr textureData_proto_TEXTURE_TYPE textureData_proto_TEXTURE_TYPE_TEXTURE_TYPE_MIN = static_cast<textureData_proto_TEXTURE_TYPE>(0);
constexpr textureData_proto_TEXTURE_TYPE textureData_proto_TEXTURE_TYPE_TEXTURE_TYPE_MAX = static_cast<textureData_proto_TEXTURE_TYPE>(3);
constexpr int textureData_proto_TEXTURE_TYPE_TEXTURE_TYPE_ARRAYSIZE = 3 + 1;
const std::string& textureData_proto_TEXTURE_TYPE_Name(textureData_proto_TEXTURE_TYPE value);
template <typename T>
const std::string& textureData_proto_TEXTURE_TYPE_Name(T value) {
  static_assert(std::is_same<T, textureData_proto_TEXTURE_TYPE>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TEXTURE_TYPE_Name().");
  return textureData_proto_TEXTURE_TYPE_Name(static_cast<textureData_proto_TEXTURE_TYPE>(value));
}
const std::string& textureData_proto_TEXTURE_TYPE_Name(textureData_proto_TEXTURE_TYPE value);
bool textureData_proto_TEXTURE_TYPE_Parse(absl::string_view name, textureData_proto_TEXTURE_TYPE* value);
enum textureData_proto_TEXTURE_MAG_FILTER : int {
  textureData_proto_TEXTURE_MAG_FILTER_MAG_NEAREST = 0,
  textureData_proto_TEXTURE_MAG_FILTER_MAG_LINEAR = 1,
  textureData_proto_TEXTURE_MAG_FILTER_textureData_proto_TEXTURE_MAG_FILTER_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  textureData_proto_TEXTURE_MAG_FILTER_textureData_proto_TEXTURE_MAG_FILTER_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool textureData_proto_TEXTURE_MAG_FILTER_IsValid(int value);
constexpr textureData_proto_TEXTURE_MAG_FILTER textureData_proto_TEXTURE_MAG_FILTER_TEXTURE_MAG_FILTER_MIN = static_cast<textureData_proto_TEXTURE_MAG_FILTER>(0);
constexpr textureData_proto_TEXTURE_MAG_FILTER textureData_proto_TEXTURE_MAG_FILTER_TEXTURE_MAG_FILTER_MAX = static_cast<textureData_proto_TEXTURE_MAG_FILTER>(1);
constexpr int textureData_proto_TEXTURE_MAG_FILTER_TEXTURE_MAG_FILTER_ARRAYSIZE = 1 + 1;
const std::string& textureData_proto_TEXTURE_MAG_FILTER_Name(textureData_proto_TEXTURE_MAG_FILTER value);
template <typename T>
const std::string& textureData_proto_TEXTURE_MAG_FILTER_Name(T value) {
  static_assert(std::is_same<T, textureData_proto_TEXTURE_MAG_FILTER>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TEXTURE_MAG_FILTER_Name().");
  return textureData_proto_TEXTURE_MAG_FILTER_Name(static_cast<textureData_proto_TEXTURE_MAG_FILTER>(value));
}
const std::string& textureData_proto_TEXTURE_MAG_FILTER_Name(textureData_proto_TEXTURE_MAG_FILTER value);
bool textureData_proto_TEXTURE_MAG_FILTER_Parse(absl::string_view name, textureData_proto_TEXTURE_MAG_FILTER* value);
enum textureData_proto_TEXTURE_MIN_FILTER : int {
  textureData_proto_TEXTURE_MIN_FILTER_MIN_NEAREST = 0,
  textureData_proto_TEXTURE_MIN_FILTER_MIN_LINEAR = 1,
  textureData_proto_TEXTURE_MIN_FILTER_MIN_NEAREST_MIPMAP_NEAREST = 2,
  textureData_proto_TEXTURE_MIN_FILTER_MIN_LINEAR_MIPMAP_NEAREST = 3,
  textureData_proto_TEXTURE_MIN_FILTER_MIN_NEAREST_MIPMAP_LINEAR = 4,
  textureData_proto_TEXTURE_MIN_FILTER_MIN_LINEAR_MIPMAP_LINEAR = 5,
  textureData_proto_TEXTURE_MIN_FILTER_textureData_proto_TEXTURE_MIN_FILTER_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  textureData_proto_TEXTURE_MIN_FILTER_textureData_proto_TEXTURE_MIN_FILTER_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool textureData_proto_TEXTURE_MIN_FILTER_IsValid(int value);
constexpr textureData_proto_TEXTURE_MIN_FILTER textureData_proto_TEXTURE_MIN_FILTER_TEXTURE_MIN_FILTER_MIN = static_cast<textureData_proto_TEXTURE_MIN_FILTER>(0);
constexpr textureData_proto_TEXTURE_MIN_FILTER textureData_proto_TEXTURE_MIN_FILTER_TEXTURE_MIN_FILTER_MAX = static_cast<textureData_proto_TEXTURE_MIN_FILTER>(5);
constexpr int textureData_proto_TEXTURE_MIN_FILTER_TEXTURE_MIN_FILTER_ARRAYSIZE = 5 + 1;
const std::string& textureData_proto_TEXTURE_MIN_FILTER_Name(textureData_proto_TEXTURE_MIN_FILTER value);
template <typename T>
const std::string& textureData_proto_TEXTURE_MIN_FILTER_Name(T value) {
  static_assert(std::is_same<T, textureData_proto_TEXTURE_MIN_FILTER>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TEXTURE_MIN_FILTER_Name().");
  return textureData_proto_TEXTURE_MIN_FILTER_Name(static_cast<textureData_proto_TEXTURE_MIN_FILTER>(value));
}
const std::string& textureData_proto_TEXTURE_MIN_FILTER_Name(textureData_proto_TEXTURE_MIN_FILTER value);
bool textureData_proto_TEXTURE_MIN_FILTER_Parse(absl::string_view name, textureData_proto_TEXTURE_MIN_FILTER* value);
enum textureData_proto_TEXTURE_WRAP : int {
  textureData_proto_TEXTURE_WRAP_WRAP_CLAMP_TO_EDGE = 0,
  textureData_proto_TEXTURE_WRAP_WRAP_MIRRORED_REPEAT = 1,
  textureData_proto_TEXTURE_WRAP_WRAP_REPEAT = 2,
  textureData_proto_TEXTURE_WRAP_textureData_proto_TEXTURE_WRAP_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  textureData_proto_TEXTURE_WRAP_textureData_proto_TEXTURE_WRAP_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool textureData_proto_TEXTURE_WRAP_IsValid(int value);
constexpr textureData_proto_TEXTURE_WRAP textureData_proto_TEXTURE_WRAP_TEXTURE_WRAP_MIN = static_cast<textureData_proto_TEXTURE_WRAP>(0);
constexpr textureData_proto_TEXTURE_WRAP textureData_proto_TEXTURE_WRAP_TEXTURE_WRAP_MAX = static_cast<textureData_proto_TEXTURE_WRAP>(2);
constexpr int textureData_proto_TEXTURE_WRAP_TEXTURE_WRAP_ARRAYSIZE = 2 + 1;
const std::string& textureData_proto_TEXTURE_WRAP_Name(textureData_proto_TEXTURE_WRAP value);
template <typename T>
const std::string& textureData_proto_TEXTURE_WRAP_Name(T value) {
  static_assert(std::is_same<T, textureData_proto_TEXTURE_WRAP>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TEXTURE_WRAP_Name().");
  return textureData_proto_TEXTURE_WRAP_Name(static_cast<textureData_proto_TEXTURE_WRAP>(value));
}
const std::string& textureData_proto_TEXTURE_WRAP_Name(textureData_proto_TEXTURE_WRAP value);
bool textureData_proto_TEXTURE_WRAP_Parse(absl::string_view name, textureData_proto_TEXTURE_WRAP* value);
enum textureData_proto_TEXTURE_COMPONENT : int {
  textureData_proto_TEXTURE_COMPONENT_BYTE = 0,
  textureData_proto_TEXTURE_COMPONENT_UNSIGNED_BYTE = 1,
  textureData_proto_TEXTURE_COMPONENT_SHORT = 2,
  textureData_proto_TEXTURE_COMPONENT_UNSIGNED_SHORT = 3,
  textureData_proto_TEXTURE_COMPONENT_INT = 4,
  textureData_proto_TEXTURE_COMPONENT_UNSIGNED_INT = 5,
  textureData_proto_TEXTURE_COMPONENT_FLOAT = 6,
  textureData_proto_TEXTURE_COMPONENT_DOUBLE = 7,
  textureData_proto_TEXTURE_COMPONENT_textureData_proto_TEXTURE_COMPONENT_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  textureData_proto_TEXTURE_COMPONENT_textureData_proto_TEXTURE_COMPONENT_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool textureData_proto_TEXTURE_COMPONENT_IsValid(int value);
constexpr textureData_proto_TEXTURE_COMPONENT textureData_proto_TEXTURE_COMPONENT_TEXTURE_COMPONENT_MIN = static_cast<textureData_proto_TEXTURE_COMPONENT>(0);
constexpr textureData_proto_TEXTURE_COMPONENT textureData_proto_TEXTURE_COMPONENT_TEXTURE_COMPONENT_MAX = static_cast<textureData_proto_TEXTURE_COMPONENT>(7);
constexpr int textureData_proto_TEXTURE_COMPONENT_TEXTURE_COMPONENT_ARRAYSIZE = 7 + 1;
const std::string& textureData_proto_TEXTURE_COMPONENT_Name(textureData_proto_TEXTURE_COMPONENT value);
template <typename T>
const std::string& textureData_proto_TEXTURE_COMPONENT_Name(T value) {
  static_assert(std::is_same<T, textureData_proto_TEXTURE_COMPONENT>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TEXTURE_COMPONENT_Name().");
  return textureData_proto_TEXTURE_COMPONENT_Name(static_cast<textureData_proto_TEXTURE_COMPONENT>(value));
}
const std::string& textureData_proto_TEXTURE_COMPONENT_Name(textureData_proto_TEXTURE_COMPONENT value);
bool textureData_proto_TEXTURE_COMPONENT_Parse(absl::string_view name, textureData_proto_TEXTURE_COMPONENT* value);

// ===================================================================


// -------------------------------------------------------------------

class textureData_proto final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:textureData_proto) */ {
 public:
  inline textureData_proto() : textureData_proto(nullptr) {}
  ~textureData_proto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR textureData_proto(::google::protobuf::internal::ConstantInitialized);

  textureData_proto(const textureData_proto& from);
  textureData_proto(textureData_proto&& from) noexcept
    : textureData_proto() {
    *this = ::std::move(from);
  }

  inline textureData_proto& operator=(const textureData_proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline textureData_proto& operator=(textureData_proto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const textureData_proto& default_instance() {
    return *internal_default_instance();
  }
  static inline const textureData_proto* internal_default_instance() {
    return reinterpret_cast<const textureData_proto*>(
               &_textureData_proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(textureData_proto& a, textureData_proto& b) {
    a.Swap(&b);
  }
  inline void Swap(textureData_proto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(textureData_proto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  textureData_proto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<textureData_proto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)  final;
  void CopyFrom(const textureData_proto& from);
  void MergeFrom(const textureData_proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(textureData_proto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "textureData_proto";
  }
  protected:
  explicit textureData_proto(::google::protobuf::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  using TEXTURE_TYPE = textureData_proto_TEXTURE_TYPE;
  static constexpr TEXTURE_TYPE JPEG = textureData_proto_TEXTURE_TYPE_JPEG;
  static constexpr TEXTURE_TYPE PNG = textureData_proto_TEXTURE_TYPE_PNG;
  static constexpr TEXTURE_TYPE BMP = textureData_proto_TEXTURE_TYPE_BMP;
  static constexpr TEXTURE_TYPE GIF = textureData_proto_TEXTURE_TYPE_GIF;
  static inline bool TEXTURE_TYPE_IsValid(int value) {
    return textureData_proto_TEXTURE_TYPE_IsValid(value);
  }
  static constexpr TEXTURE_TYPE TEXTURE_TYPE_MIN = textureData_proto_TEXTURE_TYPE_TEXTURE_TYPE_MIN;
  static constexpr TEXTURE_TYPE TEXTURE_TYPE_MAX = textureData_proto_TEXTURE_TYPE_TEXTURE_TYPE_MAX;
  static constexpr int TEXTURE_TYPE_ARRAYSIZE = textureData_proto_TEXTURE_TYPE_TEXTURE_TYPE_ARRAYSIZE;
  template <typename T>
  static inline const std::string& TEXTURE_TYPE_Name(T value) {
    return textureData_proto_TEXTURE_TYPE_Name(value);
  }
  static inline bool TEXTURE_TYPE_Parse(absl::string_view name, TEXTURE_TYPE* value) {
    return textureData_proto_TEXTURE_TYPE_Parse(name, value);
  }

  using TEXTURE_MAG_FILTER = textureData_proto_TEXTURE_MAG_FILTER;
  static constexpr TEXTURE_MAG_FILTER MAG_NEAREST = textureData_proto_TEXTURE_MAG_FILTER_MAG_NEAREST;
  static constexpr TEXTURE_MAG_FILTER MAG_LINEAR = textureData_proto_TEXTURE_MAG_FILTER_MAG_LINEAR;
  static inline bool TEXTURE_MAG_FILTER_IsValid(int value) {
    return textureData_proto_TEXTURE_MAG_FILTER_IsValid(value);
  }
  static constexpr TEXTURE_MAG_FILTER TEXTURE_MAG_FILTER_MIN = textureData_proto_TEXTURE_MAG_FILTER_TEXTURE_MAG_FILTER_MIN;
  static constexpr TEXTURE_MAG_FILTER TEXTURE_MAG_FILTER_MAX = textureData_proto_TEXTURE_MAG_FILTER_TEXTURE_MAG_FILTER_MAX;
  static constexpr int TEXTURE_MAG_FILTER_ARRAYSIZE = textureData_proto_TEXTURE_MAG_FILTER_TEXTURE_MAG_FILTER_ARRAYSIZE;
  template <typename T>
  static inline const std::string& TEXTURE_MAG_FILTER_Name(T value) {
    return textureData_proto_TEXTURE_MAG_FILTER_Name(value);
  }
  static inline bool TEXTURE_MAG_FILTER_Parse(absl::string_view name, TEXTURE_MAG_FILTER* value) {
    return textureData_proto_TEXTURE_MAG_FILTER_Parse(name, value);
  }

  using TEXTURE_MIN_FILTER = textureData_proto_TEXTURE_MIN_FILTER;
  static constexpr TEXTURE_MIN_FILTER MIN_NEAREST = textureData_proto_TEXTURE_MIN_FILTER_MIN_NEAREST;
  static constexpr TEXTURE_MIN_FILTER MIN_LINEAR = textureData_proto_TEXTURE_MIN_FILTER_MIN_LINEAR;
  static constexpr TEXTURE_MIN_FILTER MIN_NEAREST_MIPMAP_NEAREST = textureData_proto_TEXTURE_MIN_FILTER_MIN_NEAREST_MIPMAP_NEAREST;
  static constexpr TEXTURE_MIN_FILTER MIN_LINEAR_MIPMAP_NEAREST = textureData_proto_TEXTURE_MIN_FILTER_MIN_LINEAR_MIPMAP_NEAREST;
  static constexpr TEXTURE_MIN_FILTER MIN_NEAREST_MIPMAP_LINEAR = textureData_proto_TEXTURE_MIN_FILTER_MIN_NEAREST_MIPMAP_LINEAR;
  static constexpr TEXTURE_MIN_FILTER MIN_LINEAR_MIPMAP_LINEAR = textureData_proto_TEXTURE_MIN_FILTER_MIN_LINEAR_MIPMAP_LINEAR;
  static inline bool TEXTURE_MIN_FILTER_IsValid(int value) {
    return textureData_proto_TEXTURE_MIN_FILTER_IsValid(value);
  }
  static constexpr TEXTURE_MIN_FILTER TEXTURE_MIN_FILTER_MIN = textureData_proto_TEXTURE_MIN_FILTER_TEXTURE_MIN_FILTER_MIN;
  static constexpr TEXTURE_MIN_FILTER TEXTURE_MIN_FILTER_MAX = textureData_proto_TEXTURE_MIN_FILTER_TEXTURE_MIN_FILTER_MAX;
  static constexpr int TEXTURE_MIN_FILTER_ARRAYSIZE = textureData_proto_TEXTURE_MIN_FILTER_TEXTURE_MIN_FILTER_ARRAYSIZE;
  template <typename T>
  static inline const std::string& TEXTURE_MIN_FILTER_Name(T value) {
    return textureData_proto_TEXTURE_MIN_FILTER_Name(value);
  }
  static inline bool TEXTURE_MIN_FILTER_Parse(absl::string_view name, TEXTURE_MIN_FILTER* value) {
    return textureData_proto_TEXTURE_MIN_FILTER_Parse(name, value);
  }

  using TEXTURE_WRAP = textureData_proto_TEXTURE_WRAP;
  static constexpr TEXTURE_WRAP WRAP_CLAMP_TO_EDGE = textureData_proto_TEXTURE_WRAP_WRAP_CLAMP_TO_EDGE;
  static constexpr TEXTURE_WRAP WRAP_MIRRORED_REPEAT = textureData_proto_TEXTURE_WRAP_WRAP_MIRRORED_REPEAT;
  static constexpr TEXTURE_WRAP WRAP_REPEAT = textureData_proto_TEXTURE_WRAP_WRAP_REPEAT;
  static inline bool TEXTURE_WRAP_IsValid(int value) {
    return textureData_proto_TEXTURE_WRAP_IsValid(value);
  }
  static constexpr TEXTURE_WRAP TEXTURE_WRAP_MIN = textureData_proto_TEXTURE_WRAP_TEXTURE_WRAP_MIN;
  static constexpr TEXTURE_WRAP TEXTURE_WRAP_MAX = textureData_proto_TEXTURE_WRAP_TEXTURE_WRAP_MAX;
  static constexpr int TEXTURE_WRAP_ARRAYSIZE = textureData_proto_TEXTURE_WRAP_TEXTURE_WRAP_ARRAYSIZE;
  template <typename T>
  static inline const std::string& TEXTURE_WRAP_Name(T value) {
    return textureData_proto_TEXTURE_WRAP_Name(value);
  }
  static inline bool TEXTURE_WRAP_Parse(absl::string_view name, TEXTURE_WRAP* value) {
    return textureData_proto_TEXTURE_WRAP_Parse(name, value);
  }

  using TEXTURE_COMPONENT = textureData_proto_TEXTURE_COMPONENT;
  static constexpr TEXTURE_COMPONENT BYTE = textureData_proto_TEXTURE_COMPONENT_BYTE;
  static constexpr TEXTURE_COMPONENT UNSIGNED_BYTE = textureData_proto_TEXTURE_COMPONENT_UNSIGNED_BYTE;
  static constexpr TEXTURE_COMPONENT SHORT = textureData_proto_TEXTURE_COMPONENT_SHORT;
  static constexpr TEXTURE_COMPONENT UNSIGNED_SHORT = textureData_proto_TEXTURE_COMPONENT_UNSIGNED_SHORT;
  static constexpr TEXTURE_COMPONENT INT = textureData_proto_TEXTURE_COMPONENT_INT;
  static constexpr TEXTURE_COMPONENT UNSIGNED_INT = textureData_proto_TEXTURE_COMPONENT_UNSIGNED_INT;
  static constexpr TEXTURE_COMPONENT FLOAT = textureData_proto_TEXTURE_COMPONENT_FLOAT;
  static constexpr TEXTURE_COMPONENT DOUBLE = textureData_proto_TEXTURE_COMPONENT_DOUBLE;
  static inline bool TEXTURE_COMPONENT_IsValid(int value) {
    return textureData_proto_TEXTURE_COMPONENT_IsValid(value);
  }
  static constexpr TEXTURE_COMPONENT TEXTURE_COMPONENT_MIN = textureData_proto_TEXTURE_COMPONENT_TEXTURE_COMPONENT_MIN;
  static constexpr TEXTURE_COMPONENT TEXTURE_COMPONENT_MAX = textureData_proto_TEXTURE_COMPONENT_TEXTURE_COMPONENT_MAX;
  static constexpr int TEXTURE_COMPONENT_ARRAYSIZE = textureData_proto_TEXTURE_COMPONENT_TEXTURE_COMPONENT_ARRAYSIZE;
  template <typename T>
  static inline const std::string& TEXTURE_COMPONENT_Name(T value) {
    return textureData_proto_TEXTURE_COMPONENT_Name(value);
  }
  static inline bool TEXTURE_COMPONENT_Parse(absl::string_view name, TEXTURE_COMPONENT* value) {
    return textureData_proto_TEXTURE_COMPONENT_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameDataFieldNumber = 13,
    kPoDataFieldNumber = 15,
    kTextTypeFieldNumber = 1,
    kMagFilterFieldNumber = 2,
    kMinFilterFieldNumber = 3,
    kWrapSFieldNumber = 4,
    kWrapTFieldNumber = 5,
    kWidthFieldNumber = 6,
    kHeightFieldNumber = 7,
    kComponentFieldNumber = 8,
    kBitsFieldNumber = 9,
    kAsIsFieldNumber = 10,
    kPixelTypeFieldNumber = 11,
    kFileNameSizeFieldNumber = 12,
    kDataSizeFieldNumber = 14,
  };
  // optional bytes fileNameData = 13;
  bool has_filenamedata() const;
  void clear_filenamedata() ;
  const std::string& filenamedata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filenamedata(Arg_&& arg, Args_... args);
  std::string* mutable_filenamedata();
  PROTOBUF_NODISCARD std::string* release_filenamedata();
  void set_allocated_filenamedata(std::string* ptr);

  private:
  const std::string& _internal_filenamedata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filenamedata(
      const std::string& value);
  std::string* _internal_mutable_filenamedata();

  public:
  // optional bytes poData = 15;
  bool has_podata() const;
  void clear_podata() ;
  const std::string& podata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_podata(Arg_&& arg, Args_... args);
  std::string* mutable_podata();
  PROTOBUF_NODISCARD std::string* release_podata();
  void set_allocated_podata(std::string* ptr);

  private:
  const std::string& _internal_podata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_podata(
      const std::string& value);
  std::string* _internal_mutable_podata();

  public:
  // optional .textureData_proto.TEXTURE_TYPE textType = 1;
  bool has_texttype() const;
  void clear_texttype() ;
  ::textureData_proto_TEXTURE_TYPE texttype() const;
  void set_texttype(::textureData_proto_TEXTURE_TYPE value);

  private:
  ::textureData_proto_TEXTURE_TYPE _internal_texttype() const;
  void _internal_set_texttype(::textureData_proto_TEXTURE_TYPE value);

  public:
  // optional .textureData_proto.TEXTURE_MAG_FILTER magFilter = 2;
  bool has_magfilter() const;
  void clear_magfilter() ;
  ::textureData_proto_TEXTURE_MAG_FILTER magfilter() const;
  void set_magfilter(::textureData_proto_TEXTURE_MAG_FILTER value);

  private:
  ::textureData_proto_TEXTURE_MAG_FILTER _internal_magfilter() const;
  void _internal_set_magfilter(::textureData_proto_TEXTURE_MAG_FILTER value);

  public:
  // optional .textureData_proto.TEXTURE_MIN_FILTER minFilter = 3;
  bool has_minfilter() const;
  void clear_minfilter() ;
  ::textureData_proto_TEXTURE_MIN_FILTER minfilter() const;
  void set_minfilter(::textureData_proto_TEXTURE_MIN_FILTER value);

  private:
  ::textureData_proto_TEXTURE_MIN_FILTER _internal_minfilter() const;
  void _internal_set_minfilter(::textureData_proto_TEXTURE_MIN_FILTER value);

  public:
  // optional .textureData_proto.TEXTURE_WRAP wrapS = 4;
  bool has_wraps() const;
  void clear_wraps() ;
  ::textureData_proto_TEXTURE_WRAP wraps() const;
  void set_wraps(::textureData_proto_TEXTURE_WRAP value);

  private:
  ::textureData_proto_TEXTURE_WRAP _internal_wraps() const;
  void _internal_set_wraps(::textureData_proto_TEXTURE_WRAP value);

  public:
  // optional .textureData_proto.TEXTURE_WRAP wrapT = 5;
  bool has_wrapt() const;
  void clear_wrapt() ;
  ::textureData_proto_TEXTURE_WRAP wrapt() const;
  void set_wrapt(::textureData_proto_TEXTURE_WRAP value);

  private:
  ::textureData_proto_TEXTURE_WRAP _internal_wrapt() const;
  void _internal_set_wrapt(::textureData_proto_TEXTURE_WRAP value);

  public:
  // optional uint32 width = 6;
  bool has_width() const;
  void clear_width() ;
  ::uint32_t width() const;
  void set_width(::uint32_t value);

  private:
  ::uint32_t _internal_width() const;
  void _internal_set_width(::uint32_t value);

  public:
  // optional uint32 height = 7;
  bool has_height() const;
  void clear_height() ;
  ::uint32_t height() const;
  void set_height(::uint32_t value);

  private:
  ::uint32_t _internal_height() const;
  void _internal_set_height(::uint32_t value);

  public:
  // optional uint32 component = 8;
  bool has_component() const;
  void clear_component() ;
  ::uint32_t component() const;
  void set_component(::uint32_t value);

  private:
  ::uint32_t _internal_component() const;
  void _internal_set_component(::uint32_t value);

  public:
  // optional uint32 bits = 9;
  bool has_bits() const;
  void clear_bits() ;
  ::uint32_t bits() const;
  void set_bits(::uint32_t value);

  private:
  ::uint32_t _internal_bits() const;
  void _internal_set_bits(::uint32_t value);

  public:
  // optional uint32 as_is = 10;
  bool has_as_is() const;
  void clear_as_is() ;
  ::uint32_t as_is() const;
  void set_as_is(::uint32_t value);

  private:
  ::uint32_t _internal_as_is() const;
  void _internal_set_as_is(::uint32_t value);

  public:
  // optional .textureData_proto.TEXTURE_COMPONENT pixel_type = 11;
  bool has_pixel_type() const;
  void clear_pixel_type() ;
  ::textureData_proto_TEXTURE_COMPONENT pixel_type() const;
  void set_pixel_type(::textureData_proto_TEXTURE_COMPONENT value);

  private:
  ::textureData_proto_TEXTURE_COMPONENT _internal_pixel_type() const;
  void _internal_set_pixel_type(::textureData_proto_TEXTURE_COMPONENT value);

  public:
  // optional uint32 fileNameSize = 12;
  bool has_filenamesize() const;
  void clear_filenamesize() ;
  ::uint32_t filenamesize() const;
  void set_filenamesize(::uint32_t value);

  private:
  ::uint32_t _internal_filenamesize() const;
  void _internal_set_filenamesize(::uint32_t value);

  public:
  // optional uint32 dataSize = 14;
  bool has_datasize() const;
  void clear_datasize() ;
  ::uint32_t datasize() const;
  void set_datasize(::uint32_t value);

  private:
  ::uint32_t _internal_datasize() const;
  void _internal_set_datasize(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:textureData_proto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 15, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr filenamedata_;
    ::google::protobuf::internal::ArenaStringPtr podata_;
    int texttype_;
    int magfilter_;
    int minfilter_;
    int wraps_;
    int wrapt_;
    ::uint32_t width_;
    ::uint32_t height_;
    ::uint32_t component_;
    ::uint32_t bits_;
    ::uint32_t as_is_;
    int pixel_type_;
    ::uint32_t filenamesize_;
    ::uint32_t datasize_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_textureData_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// textureData_proto

// optional .textureData_proto.TEXTURE_TYPE textType = 1;
inline bool textureData_proto::has_texttype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void textureData_proto::clear_texttype() {
  _impl_.texttype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::textureData_proto_TEXTURE_TYPE textureData_proto::texttype() const {
  // @@protoc_insertion_point(field_get:textureData_proto.textType)
  return _internal_texttype();
}
inline void textureData_proto::set_texttype(::textureData_proto_TEXTURE_TYPE value) {
  _internal_set_texttype(value);
  // @@protoc_insertion_point(field_set:textureData_proto.textType)
}
inline ::textureData_proto_TEXTURE_TYPE textureData_proto::_internal_texttype() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::textureData_proto_TEXTURE_TYPE>(_impl_.texttype_);
}
inline void textureData_proto::_internal_set_texttype(::textureData_proto_TEXTURE_TYPE value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.texttype_ = value;
}

// optional .textureData_proto.TEXTURE_MAG_FILTER magFilter = 2;
inline bool textureData_proto::has_magfilter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void textureData_proto::clear_magfilter() {
  _impl_.magfilter_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::textureData_proto_TEXTURE_MAG_FILTER textureData_proto::magfilter() const {
  // @@protoc_insertion_point(field_get:textureData_proto.magFilter)
  return _internal_magfilter();
}
inline void textureData_proto::set_magfilter(::textureData_proto_TEXTURE_MAG_FILTER value) {
  _internal_set_magfilter(value);
  // @@protoc_insertion_point(field_set:textureData_proto.magFilter)
}
inline ::textureData_proto_TEXTURE_MAG_FILTER textureData_proto::_internal_magfilter() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::textureData_proto_TEXTURE_MAG_FILTER>(_impl_.magfilter_);
}
inline void textureData_proto::_internal_set_magfilter(::textureData_proto_TEXTURE_MAG_FILTER value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.magfilter_ = value;
}

// optional .textureData_proto.TEXTURE_MIN_FILTER minFilter = 3;
inline bool textureData_proto::has_minfilter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void textureData_proto::clear_minfilter() {
  _impl_.minfilter_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::textureData_proto_TEXTURE_MIN_FILTER textureData_proto::minfilter() const {
  // @@protoc_insertion_point(field_get:textureData_proto.minFilter)
  return _internal_minfilter();
}
inline void textureData_proto::set_minfilter(::textureData_proto_TEXTURE_MIN_FILTER value) {
  _internal_set_minfilter(value);
  // @@protoc_insertion_point(field_set:textureData_proto.minFilter)
}
inline ::textureData_proto_TEXTURE_MIN_FILTER textureData_proto::_internal_minfilter() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::textureData_proto_TEXTURE_MIN_FILTER>(_impl_.minfilter_);
}
inline void textureData_proto::_internal_set_minfilter(::textureData_proto_TEXTURE_MIN_FILTER value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.minfilter_ = value;
}

// optional .textureData_proto.TEXTURE_WRAP wrapS = 4;
inline bool textureData_proto::has_wraps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void textureData_proto::clear_wraps() {
  _impl_.wraps_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::textureData_proto_TEXTURE_WRAP textureData_proto::wraps() const {
  // @@protoc_insertion_point(field_get:textureData_proto.wrapS)
  return _internal_wraps();
}
inline void textureData_proto::set_wraps(::textureData_proto_TEXTURE_WRAP value) {
  _internal_set_wraps(value);
  // @@protoc_insertion_point(field_set:textureData_proto.wrapS)
}
inline ::textureData_proto_TEXTURE_WRAP textureData_proto::_internal_wraps() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::textureData_proto_TEXTURE_WRAP>(_impl_.wraps_);
}
inline void textureData_proto::_internal_set_wraps(::textureData_proto_TEXTURE_WRAP value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.wraps_ = value;
}

// optional .textureData_proto.TEXTURE_WRAP wrapT = 5;
inline bool textureData_proto::has_wrapt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void textureData_proto::clear_wrapt() {
  _impl_.wrapt_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::textureData_proto_TEXTURE_WRAP textureData_proto::wrapt() const {
  // @@protoc_insertion_point(field_get:textureData_proto.wrapT)
  return _internal_wrapt();
}
inline void textureData_proto::set_wrapt(::textureData_proto_TEXTURE_WRAP value) {
  _internal_set_wrapt(value);
  // @@protoc_insertion_point(field_set:textureData_proto.wrapT)
}
inline ::textureData_proto_TEXTURE_WRAP textureData_proto::_internal_wrapt() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::textureData_proto_TEXTURE_WRAP>(_impl_.wrapt_);
}
inline void textureData_proto::_internal_set_wrapt(::textureData_proto_TEXTURE_WRAP value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.wrapt_ = value;
}

// optional uint32 width = 6;
inline bool textureData_proto::has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void textureData_proto::clear_width() {
  _impl_.width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t textureData_proto::width() const {
  // @@protoc_insertion_point(field_get:textureData_proto.width)
  return _internal_width();
}
inline void textureData_proto::set_width(::uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:textureData_proto.width)
}
inline ::uint32_t textureData_proto::_internal_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_;
}
inline void textureData_proto::_internal_set_width(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.width_ = value;
}

// optional uint32 height = 7;
inline bool textureData_proto::has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void textureData_proto::clear_height() {
  _impl_.height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t textureData_proto::height() const {
  // @@protoc_insertion_point(field_get:textureData_proto.height)
  return _internal_height();
}
inline void textureData_proto::set_height(::uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:textureData_proto.height)
}
inline ::uint32_t textureData_proto::_internal_height() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.height_;
}
inline void textureData_proto::_internal_set_height(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.height_ = value;
}

// optional uint32 component = 8;
inline bool textureData_proto::has_component() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void textureData_proto::clear_component() {
  _impl_.component_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint32_t textureData_proto::component() const {
  // @@protoc_insertion_point(field_get:textureData_proto.component)
  return _internal_component();
}
inline void textureData_proto::set_component(::uint32_t value) {
  _internal_set_component(value);
  // @@protoc_insertion_point(field_set:textureData_proto.component)
}
inline ::uint32_t textureData_proto::_internal_component() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.component_;
}
inline void textureData_proto::_internal_set_component(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.component_ = value;
}

// optional uint32 bits = 9;
inline bool textureData_proto::has_bits() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void textureData_proto::clear_bits() {
  _impl_.bits_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::uint32_t textureData_proto::bits() const {
  // @@protoc_insertion_point(field_get:textureData_proto.bits)
  return _internal_bits();
}
inline void textureData_proto::set_bits(::uint32_t value) {
  _internal_set_bits(value);
  // @@protoc_insertion_point(field_set:textureData_proto.bits)
}
inline ::uint32_t textureData_proto::_internal_bits() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bits_;
}
inline void textureData_proto::_internal_set_bits(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.bits_ = value;
}

// optional uint32 as_is = 10;
inline bool textureData_proto::has_as_is() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void textureData_proto::clear_as_is() {
  _impl_.as_is_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::uint32_t textureData_proto::as_is() const {
  // @@protoc_insertion_point(field_get:textureData_proto.as_is)
  return _internal_as_is();
}
inline void textureData_proto::set_as_is(::uint32_t value) {
  _internal_set_as_is(value);
  // @@protoc_insertion_point(field_set:textureData_proto.as_is)
}
inline ::uint32_t textureData_proto::_internal_as_is() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.as_is_;
}
inline void textureData_proto::_internal_set_as_is(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.as_is_ = value;
}

// optional .textureData_proto.TEXTURE_COMPONENT pixel_type = 11;
inline bool textureData_proto::has_pixel_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void textureData_proto::clear_pixel_type() {
  _impl_.pixel_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::textureData_proto_TEXTURE_COMPONENT textureData_proto::pixel_type() const {
  // @@protoc_insertion_point(field_get:textureData_proto.pixel_type)
  return _internal_pixel_type();
}
inline void textureData_proto::set_pixel_type(::textureData_proto_TEXTURE_COMPONENT value) {
  _internal_set_pixel_type(value);
  // @@protoc_insertion_point(field_set:textureData_proto.pixel_type)
}
inline ::textureData_proto_TEXTURE_COMPONENT textureData_proto::_internal_pixel_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::textureData_proto_TEXTURE_COMPONENT>(_impl_.pixel_type_);
}
inline void textureData_proto::_internal_set_pixel_type(::textureData_proto_TEXTURE_COMPONENT value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.pixel_type_ = value;
}

// optional uint32 fileNameSize = 12;
inline bool textureData_proto::has_filenamesize() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void textureData_proto::clear_filenamesize() {
  _impl_.filenamesize_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::uint32_t textureData_proto::filenamesize() const {
  // @@protoc_insertion_point(field_get:textureData_proto.fileNameSize)
  return _internal_filenamesize();
}
inline void textureData_proto::set_filenamesize(::uint32_t value) {
  _internal_set_filenamesize(value);
  // @@protoc_insertion_point(field_set:textureData_proto.fileNameSize)
}
inline ::uint32_t textureData_proto::_internal_filenamesize() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.filenamesize_;
}
inline void textureData_proto::_internal_set_filenamesize(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.filenamesize_ = value;
}

// optional bytes fileNameData = 13;
inline bool textureData_proto::has_filenamedata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void textureData_proto::clear_filenamedata() {
  _impl_.filenamedata_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& textureData_proto::filenamedata() const {
  // @@protoc_insertion_point(field_get:textureData_proto.fileNameData)
  return _internal_filenamedata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void textureData_proto::set_filenamedata(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.filenamedata_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:textureData_proto.fileNameData)
}
inline std::string* textureData_proto::mutable_filenamedata() {
  std::string* _s = _internal_mutable_filenamedata();
  // @@protoc_insertion_point(field_mutable:textureData_proto.fileNameData)
  return _s;
}
inline const std::string& textureData_proto::_internal_filenamedata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.filenamedata_.Get();
}
inline void textureData_proto::_internal_set_filenamedata(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.filenamedata_.Set(value, GetArenaForAllocation());
}
inline std::string* textureData_proto::_internal_mutable_filenamedata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.filenamedata_.Mutable( GetArenaForAllocation());
}
inline std::string* textureData_proto::release_filenamedata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:textureData_proto.fileNameData)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.filenamedata_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filenamedata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void textureData_proto::set_allocated_filenamedata(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.filenamedata_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.filenamedata_.IsDefault()) {
          _impl_.filenamedata_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:textureData_proto.fileNameData)
}

// optional uint32 dataSize = 14;
inline bool textureData_proto::has_datasize() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void textureData_proto::clear_datasize() {
  _impl_.datasize_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::uint32_t textureData_proto::datasize() const {
  // @@protoc_insertion_point(field_get:textureData_proto.dataSize)
  return _internal_datasize();
}
inline void textureData_proto::set_datasize(::uint32_t value) {
  _internal_set_datasize(value);
  // @@protoc_insertion_point(field_set:textureData_proto.dataSize)
}
inline ::uint32_t textureData_proto::_internal_datasize() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.datasize_;
}
inline void textureData_proto::_internal_set_datasize(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.datasize_ = value;
}

// optional bytes poData = 15;
inline bool textureData_proto::has_podata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void textureData_proto::clear_podata() {
  _impl_.podata_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& textureData_proto::podata() const {
  // @@protoc_insertion_point(field_get:textureData_proto.poData)
  return _internal_podata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void textureData_proto::set_podata(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.podata_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:textureData_proto.poData)
}
inline std::string* textureData_proto::mutable_podata() {
  std::string* _s = _internal_mutable_podata();
  // @@protoc_insertion_point(field_mutable:textureData_proto.poData)
  return _s;
}
inline const std::string& textureData_proto::_internal_podata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.podata_.Get();
}
inline void textureData_proto::_internal_set_podata(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.podata_.Set(value, GetArenaForAllocation());
}
inline std::string* textureData_proto::_internal_mutable_podata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.podata_.Mutable( GetArenaForAllocation());
}
inline std::string* textureData_proto::release_podata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:textureData_proto.poData)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.podata_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.podata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void textureData_proto::set_allocated_podata(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.podata_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.podata_.IsDefault()) {
          _impl_.podata_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:textureData_proto.poData)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::textureData_proto_TEXTURE_TYPE> : std::true_type {};
template <>
struct is_proto_enum<::textureData_proto_TEXTURE_MAG_FILTER> : std::true_type {};
template <>
struct is_proto_enum<::textureData_proto_TEXTURE_MIN_FILTER> : std::true_type {};
template <>
struct is_proto_enum<::textureData_proto_TEXTURE_WRAP> : std::true_type {};
template <>
struct is_proto_enum<::textureData_proto_TEXTURE_COMPONENT> : std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_textureData_2eproto_2epb_2eh
