// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meshData.proto

#include "meshData.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
        template <typename>
PROTOBUF_CONSTEXPR meshData_proto::meshData_proto(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.pmeshname_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.vbo_vert_)*/ nullptr,
      /*decltype(_impl_.vbo_norm_)*/ nullptr,
      /*decltype(_impl_.vbo_uv_)*/ nullptr,
      /*decltype(_impl_.vbo_index_)*/ nullptr,
      /*decltype(_impl_.text_color_)*/ nullptr,
      /*decltype(_impl_.mode_)*/ 0,
      /*decltype(_impl_.tricount_)*/ 0u,
      /*decltype(_impl_.vertcount_)*/ 0u,
    } {}
struct meshData_protoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR meshData_protoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~meshData_protoDefaultTypeInternal() {}
  union {
    meshData_proto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 meshData_protoDefaultTypeInternal _meshData_proto_default_instance_;
bool meshData_proto_RENDER_MODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    meshData_proto_RENDER_MODE_strings[7] = {};

static const char meshData_proto_RENDER_MODE_names[] = {
    "MODE_LINE"
    "MODE_LINE_LOOP"
    "MODE_LINE_STRIP"
    "MODE_POINTS"
    "MODE_TRIANGLES"
    "MODE_TRIANGLE_FAN"
    "MODE_TRIANGLE_STRIP"
};

static const ::google::protobuf::internal::EnumEntry meshData_proto_RENDER_MODE_entries[] =
    {
        {{&meshData_proto_RENDER_MODE_names[0], 9}, 1},
        {{&meshData_proto_RENDER_MODE_names[9], 14}, 2},
        {{&meshData_proto_RENDER_MODE_names[23], 15}, 3},
        {{&meshData_proto_RENDER_MODE_names[38], 11}, 0},
        {{&meshData_proto_RENDER_MODE_names[49], 14}, 4},
        {{&meshData_proto_RENDER_MODE_names[63], 17}, 6},
        {{&meshData_proto_RENDER_MODE_names[80], 19}, 5},
};

static const int meshData_proto_RENDER_MODE_entries_by_number[] = {
    3,  // 0 -> MODE_POINTS
    0,  // 1 -> MODE_LINE
    1,  // 2 -> MODE_LINE_LOOP
    2,  // 3 -> MODE_LINE_STRIP
    4,  // 4 -> MODE_TRIANGLES
    6,  // 5 -> MODE_TRIANGLE_STRIP
    5,  // 6 -> MODE_TRIANGLE_FAN
};

const std::string& meshData_proto_RENDER_MODE_Name(meshData_proto_RENDER_MODE value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          meshData_proto_RENDER_MODE_entries, meshData_proto_RENDER_MODE_entries_by_number,
          7, meshData_proto_RENDER_MODE_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      meshData_proto_RENDER_MODE_entries, meshData_proto_RENDER_MODE_entries_by_number, 7,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : meshData_proto_RENDER_MODE_strings[idx].get();
}

bool meshData_proto_RENDER_MODE_Parse(absl::string_view name, meshData_proto_RENDER_MODE* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      meshData_proto_RENDER_MODE_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<meshData_proto_RENDER_MODE>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr meshData_proto_RENDER_MODE meshData_proto::MODE_POINTS;
constexpr meshData_proto_RENDER_MODE meshData_proto::MODE_LINE;
constexpr meshData_proto_RENDER_MODE meshData_proto::MODE_LINE_LOOP;
constexpr meshData_proto_RENDER_MODE meshData_proto::MODE_LINE_STRIP;
constexpr meshData_proto_RENDER_MODE meshData_proto::MODE_TRIANGLES;
constexpr meshData_proto_RENDER_MODE meshData_proto::MODE_TRIANGLE_STRIP;
constexpr meshData_proto_RENDER_MODE meshData_proto::MODE_TRIANGLE_FAN;
constexpr meshData_proto_RENDER_MODE meshData_proto::RENDER_MODE_MIN;
constexpr meshData_proto_RENDER_MODE meshData_proto::RENDER_MODE_MAX;
constexpr int meshData_proto::RENDER_MODE_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class meshData_proto::_Internal {
 public:
  using HasBits = decltype(std::declval<meshData_proto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(meshData_proto, _impl_._has_bits_);
  static void set_has_pmeshname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tricount(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_vertcount(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::vboData_proto& vbo_vert(const meshData_proto* msg);
  static void set_has_vbo_vert(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::vboData_proto& vbo_norm(const meshData_proto* msg);
  static void set_has_vbo_norm(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::vboData_proto& vbo_uv(const meshData_proto* msg);
  static void set_has_vbo_uv(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::vboData_proto& vbo_index(const meshData_proto* msg);
  static void set_has_vbo_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::textureData_proto& text_color(const meshData_proto* msg);
  static void set_has_text_color(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::vboData_proto& meshData_proto::_Internal::vbo_vert(const meshData_proto* msg) {
  return *msg->_impl_.vbo_vert_;
}
const ::vboData_proto& meshData_proto::_Internal::vbo_norm(const meshData_proto* msg) {
  return *msg->_impl_.vbo_norm_;
}
const ::vboData_proto& meshData_proto::_Internal::vbo_uv(const meshData_proto* msg) {
  return *msg->_impl_.vbo_uv_;
}
const ::vboData_proto& meshData_proto::_Internal::vbo_index(const meshData_proto* msg) {
  return *msg->_impl_.vbo_index_;
}
const ::textureData_proto& meshData_proto::_Internal::text_color(const meshData_proto* msg) {
  return *msg->_impl_.text_color_;
}
void meshData_proto::clear_vbo_vert() {
  if (_impl_.vbo_vert_ != nullptr) _impl_.vbo_vert_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void meshData_proto::clear_vbo_norm() {
  if (_impl_.vbo_norm_ != nullptr) _impl_.vbo_norm_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void meshData_proto::clear_vbo_uv() {
  if (_impl_.vbo_uv_ != nullptr) _impl_.vbo_uv_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void meshData_proto::clear_vbo_index() {
  if (_impl_.vbo_index_ != nullptr) _impl_.vbo_index_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void meshData_proto::clear_text_color() {
  if (_impl_.text_color_ != nullptr) _impl_.text_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
meshData_proto::meshData_proto(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:meshData_proto)
}
meshData_proto::meshData_proto(const meshData_proto& from) : ::google::protobuf::MessageLite() {
  meshData_proto* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.pmeshname_){},
      decltype(_impl_.vbo_vert_){nullptr},
      decltype(_impl_.vbo_norm_){nullptr},
      decltype(_impl_.vbo_uv_){nullptr},
      decltype(_impl_.vbo_index_){nullptr},
      decltype(_impl_.text_color_){nullptr},
      decltype(_impl_.mode_){},
      decltype(_impl_.tricount_){},
      decltype(_impl_.vertcount_){},
  };
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  _impl_.pmeshname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pmeshname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pmeshname_.Set(from._internal_pmeshname(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.vbo_vert_ = new ::vboData_proto(*from._impl_.vbo_vert_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.vbo_norm_ = new ::vboData_proto(*from._impl_.vbo_norm_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.vbo_uv_ = new ::vboData_proto(*from._impl_.vbo_uv_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.vbo_index_ = new ::vboData_proto(*from._impl_.vbo_index_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.text_color_ = new ::textureData_proto(*from._impl_.text_color_);
  }
  ::memcpy(&_impl_.mode_, &from._impl_.mode_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.vertcount_) -
    reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.vertcount_));

  // @@protoc_insertion_point(copy_constructor:meshData_proto)
}
inline void meshData_proto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.pmeshname_){},
      decltype(_impl_.vbo_vert_){nullptr},
      decltype(_impl_.vbo_norm_){nullptr},
      decltype(_impl_.vbo_uv_){nullptr},
      decltype(_impl_.vbo_index_){nullptr},
      decltype(_impl_.text_color_){nullptr},
      decltype(_impl_.mode_){0},
      decltype(_impl_.tricount_){0u},
      decltype(_impl_.vertcount_){0u},
  };
  _impl_.pmeshname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pmeshname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
meshData_proto::~meshData_proto() {
  // @@protoc_insertion_point(destructor:meshData_proto)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void meshData_proto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pmeshname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.vbo_vert_;
  if (this != internal_default_instance()) delete _impl_.vbo_norm_;
  if (this != internal_default_instance()) delete _impl_.vbo_uv_;
  if (this != internal_default_instance()) delete _impl_.vbo_index_;
  if (this != internal_default_instance()) delete _impl_.text_color_;
}
void meshData_proto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void meshData_proto::Clear() {
// @@protoc_insertion_point(message_clear_start:meshData_proto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.pmeshname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.vbo_vert_ != nullptr);
      _impl_.vbo_vert_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.vbo_norm_ != nullptr);
      _impl_.vbo_norm_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.vbo_uv_ != nullptr);
      _impl_.vbo_uv_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.vbo_index_ != nullptr);
      _impl_.vbo_index_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.text_color_ != nullptr);
      _impl_.text_color_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.mode_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.tricount_) -
        reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.tricount_));
  }
  _impl_.vertcount_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* meshData_proto::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 5, 0, 2> meshData_proto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(meshData_proto, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_meshData_proto_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bytes pMeshName = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(meshData_proto, _impl_.pmeshname_)}},
    // optional .meshData_proto.RENDER_MODE mode = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 6, 0, PROTOBUF_FIELD_OFFSET(meshData_proto, _impl_.mode_)}},
    // optional uint32 triCount = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 7, 0, PROTOBUF_FIELD_OFFSET(meshData_proto, _impl_.tricount_)}},
    // optional uint32 vertCount = 4;
    {::_pbi::TcParser::FastV32S1,
     {32, 8, 0, PROTOBUF_FIELD_OFFSET(meshData_proto, _impl_.vertcount_)}},
    // optional .vboData_proto vbo_vert = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 0, PROTOBUF_FIELD_OFFSET(meshData_proto, _impl_.vbo_vert_)}},
    // optional .vboData_proto vbo_norm = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 2, 1, PROTOBUF_FIELD_OFFSET(meshData_proto, _impl_.vbo_norm_)}},
    // optional .vboData_proto vbo_uv = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 3, 2, PROTOBUF_FIELD_OFFSET(meshData_proto, _impl_.vbo_uv_)}},
    // optional .vboData_proto vbo_index = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 4, 3, PROTOBUF_FIELD_OFFSET(meshData_proto, _impl_.vbo_index_)}},
    // optional .textureData_proto text_color = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 5, 4, PROTOBUF_FIELD_OFFSET(meshData_proto, _impl_.text_color_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bytes pMeshName = 1;
    {PROTOBUF_FIELD_OFFSET(meshData_proto, _impl_.pmeshname_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional .meshData_proto.RENDER_MODE mode = 2;
    {PROTOBUF_FIELD_OFFSET(meshData_proto, _impl_.mode_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional uint32 triCount = 3;
    {PROTOBUF_FIELD_OFFSET(meshData_proto, _impl_.tricount_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 vertCount = 4;
    {PROTOBUF_FIELD_OFFSET(meshData_proto, _impl_.vertcount_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .vboData_proto vbo_vert = 5;
    {PROTOBUF_FIELD_OFFSET(meshData_proto, _impl_.vbo_vert_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .vboData_proto vbo_norm = 6;
    {PROTOBUF_FIELD_OFFSET(meshData_proto, _impl_.vbo_norm_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .vboData_proto vbo_uv = 7;
    {PROTOBUF_FIELD_OFFSET(meshData_proto, _impl_.vbo_uv_), _Internal::kHasBitsOffset + 3, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .vboData_proto vbo_index = 8;
    {PROTOBUF_FIELD_OFFSET(meshData_proto, _impl_.vbo_index_), _Internal::kHasBitsOffset + 4, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .textureData_proto text_color = 9;
    {PROTOBUF_FIELD_OFFSET(meshData_proto, _impl_.text_color_), _Internal::kHasBitsOffset + 5, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::vboData_proto>()},
    {::_pbi::TcParser::GetTable<::vboData_proto>()},
    {::_pbi::TcParser::GetTable<::vboData_proto>()},
    {::_pbi::TcParser::GetTable<::vboData_proto>()},
    {::_pbi::TcParser::GetTable<::textureData_proto>()},
  }}, {{
  }},
};

::uint8_t* meshData_proto::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:meshData_proto)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes pMeshName = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_pmeshname();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // optional .meshData_proto.RENDER_MODE mode = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_mode(), target);
  }

  // optional uint32 triCount = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_tricount(), target);
  }

  // optional uint32 vertCount = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_vertcount(), target);
  }

  // optional .vboData_proto vbo_vert = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::vbo_vert(this),
        _Internal::vbo_vert(this).GetCachedSize(), target, stream);
  }

  // optional .vboData_proto vbo_norm = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::vbo_norm(this),
        _Internal::vbo_norm(this).GetCachedSize(), target, stream);
  }

  // optional .vboData_proto vbo_uv = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::vbo_uv(this),
        _Internal::vbo_uv(this).GetCachedSize(), target, stream);
  }

  // optional .vboData_proto vbo_index = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::vbo_index(this),
        _Internal::vbo_index(this).GetCachedSize(), target, stream);
  }

  // optional .textureData_proto text_color = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::text_color(this),
        _Internal::text_color(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:meshData_proto)
  return target;
}

::size_t meshData_proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:meshData_proto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes pMeshName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_pmeshname());
    }

    // optional .vboData_proto vbo_vert = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.vbo_vert_);
    }

    // optional .vboData_proto vbo_norm = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.vbo_norm_);
    }

    // optional .vboData_proto vbo_uv = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.vbo_uv_);
    }

    // optional .vboData_proto vbo_index = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.vbo_index_);
    }

    // optional .textureData_proto text_color = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.text_color_);
    }

    // optional .meshData_proto.RENDER_MODE mode = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
    }

    // optional uint32 triCount = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_tricount());
    }

  }
  // optional uint32 vertCount = 4;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_vertcount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void meshData_proto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const meshData_proto*>(
      &from));
}

void meshData_proto::MergeFrom(const meshData_proto& from) {
  meshData_proto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:meshData_proto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_pmeshname(from._internal_pmeshname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_vbo_vert()->::vboData_proto::MergeFrom(
          from._internal_vbo_vert());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_vbo_norm()->::vboData_proto::MergeFrom(
          from._internal_vbo_norm());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_vbo_uv()->::vboData_proto::MergeFrom(
          from._internal_vbo_uv());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_vbo_index()->::vboData_proto::MergeFrom(
          from._internal_vbo_index());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_text_color()->::textureData_proto::MergeFrom(
          from._internal_text_color());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.mode_ = from._impl_.mode_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.tricount_ = from._impl_.tricount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_vertcount(from._internal_vertcount());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void meshData_proto::CopyFrom(const meshData_proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:meshData_proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool meshData_proto::IsInitialized() const {
  return true;
}

void meshData_proto::InternalSwap(meshData_proto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pmeshname_, lhs_arena,
                                       &other->_impl_.pmeshname_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(meshData_proto, _impl_.vertcount_)
      + sizeof(meshData_proto::_impl_.vertcount_)
      - PROTOBUF_FIELD_OFFSET(meshData_proto, _impl_.vbo_vert_)>(
          reinterpret_cast<char*>(&_impl_.vbo_vert_),
          reinterpret_cast<char*>(&other->_impl_.vbo_vert_));
}

std::string meshData_proto::GetTypeName() const {
  return "meshData_proto";
}

// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
